# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import libs.grpc.resources.compiled_protos.ExtractionTool_pb2 as ExtractionTool__pb2


class ExtractionToolServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAvailableImportFiles = channel.unary_unary(
            "/ExtractionToolService/GetAvailableImportFiles",
            request_serializer=ExtractionTool__pb2.GetAvailableImportFilesRequest.SerializeToString,
            response_deserializer=ExtractionTool__pb2.GetAvailableImportFilesReply.FromString,
        )
        self.GetExtractionToolDirectories = channel.unary_unary(
            "/ExtractionToolService/GetExtractionToolDirectories",
            request_serializer=ExtractionTool__pb2.GetExtractionToolDirectoriesRequest.SerializeToString,
            response_deserializer=ExtractionTool__pb2.GetExtractionToolDirectoriesReply.FromString,
        )
        self.ExportConfiguration = channel.unary_unary(
            "/ExtractionToolService/ExportConfiguration",
            request_serializer=ExtractionTool__pb2.ExtractionConfigurationRequest.SerializeToString,
            response_deserializer=ExtractionTool__pb2.ExtractionConfigurationReply.FromString,
        )
        self.ImportConfiguration = channel.unary_unary(
            "/ExtractionToolService/ImportConfiguration",
            request_serializer=ExtractionTool__pb2.ExtractionConfigurationRequest.SerializeToString,
            response_deserializer=ExtractionTool__pb2.ExtractionConfigurationReply.FromString,
        )
        self.GetExtractionStatus = channel.unary_unary(
            "/ExtractionToolService/GetExtractionStatus",
            request_serializer=ExtractionTool__pb2.GetExtractionStatusRequest.SerializeToString,
            response_deserializer=ExtractionTool__pb2.GetExtractionStatusReply.FromString,
        )


class ExtractionToolServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAvailableImportFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetExtractionToolDirectories(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ExportConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ImportConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetExtractionStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ExtractionToolServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetAvailableImportFiles": grpc.unary_unary_rpc_method_handler(
            servicer.GetAvailableImportFiles,
            request_deserializer=ExtractionTool__pb2.GetAvailableImportFilesRequest.FromString,
            response_serializer=ExtractionTool__pb2.GetAvailableImportFilesReply.SerializeToString,
        ),
        "GetExtractionToolDirectories": grpc.unary_unary_rpc_method_handler(
            servicer.GetExtractionToolDirectories,
            request_deserializer=ExtractionTool__pb2.GetExtractionToolDirectoriesRequest.FromString,
            response_serializer=ExtractionTool__pb2.GetExtractionToolDirectoriesReply.SerializeToString,
        ),
        "ExportConfiguration": grpc.unary_unary_rpc_method_handler(
            servicer.ExportConfiguration,
            request_deserializer=ExtractionTool__pb2.ExtractionConfigurationRequest.FromString,
            response_serializer=ExtractionTool__pb2.ExtractionConfigurationReply.SerializeToString,
        ),
        "ImportConfiguration": grpc.unary_unary_rpc_method_handler(
            servicer.ImportConfiguration,
            request_deserializer=ExtractionTool__pb2.ExtractionConfigurationRequest.FromString,
            response_serializer=ExtractionTool__pb2.ExtractionConfigurationReply.SerializeToString,
        ),
        "GetExtractionStatus": grpc.unary_unary_rpc_method_handler(
            servicer.GetExtractionStatus,
            request_deserializer=ExtractionTool__pb2.GetExtractionStatusRequest.FromString,
            response_serializer=ExtractionTool__pb2.GetExtractionStatusReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("ExtractionToolService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class ExtractionToolService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAvailableImportFiles(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ExtractionToolService/GetAvailableImportFiles",
            ExtractionTool__pb2.GetAvailableImportFilesRequest.SerializeToString,
            ExtractionTool__pb2.GetAvailableImportFilesReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetExtractionToolDirectories(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ExtractionToolService/GetExtractionToolDirectories",
            ExtractionTool__pb2.GetExtractionToolDirectoriesRequest.SerializeToString,
            ExtractionTool__pb2.GetExtractionToolDirectoriesReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ExportConfiguration(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ExtractionToolService/ExportConfiguration",
            ExtractionTool__pb2.ExtractionConfigurationRequest.SerializeToString,
            ExtractionTool__pb2.ExtractionConfigurationReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ImportConfiguration(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ExtractionToolService/ImportConfiguration",
            ExtractionTool__pb2.ExtractionConfigurationRequest.SerializeToString,
            ExtractionTool__pb2.ExtractionConfigurationReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetExtractionStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ExtractionToolService/GetExtractionStatus",
            ExtractionTool__pb2.GetExtractionStatusRequest.SerializeToString,
            ExtractionTool__pb2.GetExtractionStatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
