# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import libs.grpc.resources.compiled_protos.Register_pb2 as Register__pb2


class RegisterServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRegister = channel.unary_unary(
                '/RegisterService/GetRegister',
                request_serializer=Register__pb2.GetRegisterRequest.SerializeToString,
                response_deserializer=Register__pb2.GetRegisterReply.FromString,
                )
        self.GetAllRegisters = channel.unary_unary(
                '/RegisterService/GetAllRegisters',
                request_serializer=Register__pb2.GetAllRegistersRequest.SerializeToString,
                response_deserializer=Register__pb2.GetAllRegistersReply.FromString,
                )
        self.GetAllRegistersForReports = channel.unary_unary(
                '/RegisterService/GetAllRegistersForReports',
                request_serializer=Register__pb2.GetAllRegistersRequest.SerializeToString,
                response_deserializer=Register__pb2.GetAllRegistersReply.FromString,
                )
        self.UpdateRegister = channel.unary_unary(
                '/RegisterService/UpdateRegister',
                request_serializer=Register__pb2.Register.SerializeToString,
                response_deserializer=Register__pb2.UpdateRegisterReply.FromString,
                )
        self.AddRegister = channel.unary_unary(
                '/RegisterService/AddRegister',
                request_serializer=Register__pb2.Register.SerializeToString,
                response_deserializer=Register__pb2.AddRegisterReply.FromString,
                )
        self.DeleteRegister = channel.unary_unary(
                '/RegisterService/DeleteRegister',
                request_serializer=Register__pb2.DeleteRegisterRequest.SerializeToString,
                response_deserializer=Register__pb2.DeleteRegisterReply.FromString,
                )
        self.GetRegisterByMachineName = channel.unary_unary(
                '/RegisterService/GetRegisterByMachineName',
                request_serializer=Register__pb2.GetRegisterByMachineNameRequest.SerializeToString,
                response_deserializer=Register__pb2.GetRegisterByMachineNameReply.FromString,
                )
        self.GetExpressLaneConfiguration = channel.unary_unary(
                '/RegisterService/GetExpressLaneConfiguration',
                request_serializer=Register__pb2.GetExpressLaneConfigurationRequest.SerializeToString,
                response_deserializer=Register__pb2.GetExpressLaneConfigurationReply.FromString,
                )
        self.SetExpressLaneConfiguration = channel.unary_unary(
                '/RegisterService/SetExpressLaneConfiguration',
                request_serializer=Register__pb2.SetExpressLaneConfigurationRequest.SerializeToString,
                response_deserializer=Register__pb2.SetExpressLaneConfigurationReply.FromString,
                )
        self.GetRegisterGroupAssignments = channel.unary_unary(
                '/RegisterService/GetRegisterGroupAssignments',
                request_serializer=Register__pb2.GetRegisterGroupAssignmentsRequest.SerializeToString,
                response_deserializer=Register__pb2.GetRegisterGroupAssignmentsReply.FromString,
                )
        self.UpdateRegisterGroupAssignments = channel.unary_unary(
                '/RegisterService/UpdateRegisterGroupAssignments',
                request_serializer=Register__pb2.UpdateRegisterGroupAssignmentsRequest.SerializeToString,
                response_deserializer=Register__pb2.UpdateRegisterGroupAssignmentsReply.FromString,
                )
        self.GetRegisterGroup = channel.unary_unary(
                '/RegisterService/GetRegisterGroup',
                request_serializer=Register__pb2.GetRegisterGroupRequest.SerializeToString,
                response_deserializer=Register__pb2.GetRegisterGroupReply.FromString,
                )
        self.UpdateRegisterGroup = channel.unary_unary(
                '/RegisterService/UpdateRegisterGroup',
                request_serializer=Register__pb2.UpdateRegisterGroupRequest.SerializeToString,
                response_deserializer=Register__pb2.UpdateRegisterGroupReply.FromString,
                )
        self.AddRegisterGroup = channel.unary_unary(
                '/RegisterService/AddRegisterGroup',
                request_serializer=Register__pb2.AddRegisterGroupRequest.SerializeToString,
                response_deserializer=Register__pb2.AddRegisterGroupReply.FromString,
                )
        self.DeleteRegisterGroup = channel.unary_unary(
                '/RegisterService/DeleteRegisterGroup',
                request_serializer=Register__pb2.DeleteRegisterGroupRequest.SerializeToString,
                response_deserializer=Register__pb2.DeleteRegisterGroupReply.FromString,
                )
        self.GetAvailableColors = channel.unary_unary(
                '/RegisterService/GetAvailableColors',
                request_serializer=Register__pb2.GetAvailableColorsRequest.SerializeToString,
                response_deserializer=Register__pb2.GetAvailableColorsReply.FromString,
                )
        self.GetSpeedKeyMenus = channel.unary_unary(
                '/RegisterService/GetSpeedKeyMenus',
                request_serializer=Register__pb2.GetSpeedKeyMenusRequest.SerializeToString,
                response_deserializer=Register__pb2.GetSpeedKeyMenusReply.FromString,
                )
        self.AddSpeedKeyMenu = channel.unary_unary(
                '/RegisterService/AddSpeedKeyMenu',
                request_serializer=Register__pb2.AddSpeedKeyMenuRequest.SerializeToString,
                response_deserializer=Register__pb2.AddSpeedKeyMenuReply.FromString,
                )
        self.UpdateSpeedKeyMenu = channel.unary_unary(
                '/RegisterService/UpdateSpeedKeyMenu',
                request_serializer=Register__pb2.UpdateSpeedKeyMenuRequest.SerializeToString,
                response_deserializer=Register__pb2.UpdateSpeedKeyMenuReply.FromString,
                )
        self.DeleteSpeedKeyMenu = channel.unary_unary(
                '/RegisterService/DeleteSpeedKeyMenu',
                request_serializer=Register__pb2.DeleteSpeedKeyMenuRequest.SerializeToString,
                response_deserializer=Register__pb2.DeleteSpeedKeyMenuReply.FromString,
                )


class RegisterServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllRegisters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllRegistersForReports(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRegisterByMachineName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExpressLaneConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetExpressLaneConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRegisterGroupAssignments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRegisterGroupAssignments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRegisterGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRegisterGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRegisterGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRegisterGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableColors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSpeedKeyMenus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddSpeedKeyMenu(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSpeedKeyMenu(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSpeedKeyMenu(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegisterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRegister,
                    request_deserializer=Register__pb2.GetRegisterRequest.FromString,
                    response_serializer=Register__pb2.GetRegisterReply.SerializeToString,
            ),
            'GetAllRegisters': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllRegisters,
                    request_deserializer=Register__pb2.GetAllRegistersRequest.FromString,
                    response_serializer=Register__pb2.GetAllRegistersReply.SerializeToString,
            ),
            'GetAllRegistersForReports': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllRegistersForReports,
                    request_deserializer=Register__pb2.GetAllRegistersRequest.FromString,
                    response_serializer=Register__pb2.GetAllRegistersReply.SerializeToString,
            ),
            'UpdateRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRegister,
                    request_deserializer=Register__pb2.Register.FromString,
                    response_serializer=Register__pb2.UpdateRegisterReply.SerializeToString,
            ),
            'AddRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRegister,
                    request_deserializer=Register__pb2.Register.FromString,
                    response_serializer=Register__pb2.AddRegisterReply.SerializeToString,
            ),
            'DeleteRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRegister,
                    request_deserializer=Register__pb2.DeleteRegisterRequest.FromString,
                    response_serializer=Register__pb2.DeleteRegisterReply.SerializeToString,
            ),
            'GetRegisterByMachineName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRegisterByMachineName,
                    request_deserializer=Register__pb2.GetRegisterByMachineNameRequest.FromString,
                    response_serializer=Register__pb2.GetRegisterByMachineNameReply.SerializeToString,
            ),
            'GetExpressLaneConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExpressLaneConfiguration,
                    request_deserializer=Register__pb2.GetExpressLaneConfigurationRequest.FromString,
                    response_serializer=Register__pb2.GetExpressLaneConfigurationReply.SerializeToString,
            ),
            'SetExpressLaneConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.SetExpressLaneConfiguration,
                    request_deserializer=Register__pb2.SetExpressLaneConfigurationRequest.FromString,
                    response_serializer=Register__pb2.SetExpressLaneConfigurationReply.SerializeToString,
            ),
            'GetRegisterGroupAssignments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRegisterGroupAssignments,
                    request_deserializer=Register__pb2.GetRegisterGroupAssignmentsRequest.FromString,
                    response_serializer=Register__pb2.GetRegisterGroupAssignmentsReply.SerializeToString,
            ),
            'UpdateRegisterGroupAssignments': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRegisterGroupAssignments,
                    request_deserializer=Register__pb2.UpdateRegisterGroupAssignmentsRequest.FromString,
                    response_serializer=Register__pb2.UpdateRegisterGroupAssignmentsReply.SerializeToString,
            ),
            'GetRegisterGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRegisterGroup,
                    request_deserializer=Register__pb2.GetRegisterGroupRequest.FromString,
                    response_serializer=Register__pb2.GetRegisterGroupReply.SerializeToString,
            ),
            'UpdateRegisterGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRegisterGroup,
                    request_deserializer=Register__pb2.UpdateRegisterGroupRequest.FromString,
                    response_serializer=Register__pb2.UpdateRegisterGroupReply.SerializeToString,
            ),
            'AddRegisterGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRegisterGroup,
                    request_deserializer=Register__pb2.AddRegisterGroupRequest.FromString,
                    response_serializer=Register__pb2.AddRegisterGroupReply.SerializeToString,
            ),
            'DeleteRegisterGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRegisterGroup,
                    request_deserializer=Register__pb2.DeleteRegisterGroupRequest.FromString,
                    response_serializer=Register__pb2.DeleteRegisterGroupReply.SerializeToString,
            ),
            'GetAvailableColors': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableColors,
                    request_deserializer=Register__pb2.GetAvailableColorsRequest.FromString,
                    response_serializer=Register__pb2.GetAvailableColorsReply.SerializeToString,
            ),
            'GetSpeedKeyMenus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSpeedKeyMenus,
                    request_deserializer=Register__pb2.GetSpeedKeyMenusRequest.FromString,
                    response_serializer=Register__pb2.GetSpeedKeyMenusReply.SerializeToString,
            ),
            'AddSpeedKeyMenu': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSpeedKeyMenu,
                    request_deserializer=Register__pb2.AddSpeedKeyMenuRequest.FromString,
                    response_serializer=Register__pb2.AddSpeedKeyMenuReply.SerializeToString,
            ),
            'UpdateSpeedKeyMenu': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSpeedKeyMenu,
                    request_deserializer=Register__pb2.UpdateSpeedKeyMenuRequest.FromString,
                    response_serializer=Register__pb2.UpdateSpeedKeyMenuReply.SerializeToString,
            ),
            'DeleteSpeedKeyMenu': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSpeedKeyMenu,
                    request_deserializer=Register__pb2.DeleteSpeedKeyMenuRequest.FromString,
                    response_serializer=Register__pb2.DeleteSpeedKeyMenuReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RegisterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegisterService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/GetRegister',
            Register__pb2.GetRegisterRequest.SerializeToString,
            Register__pb2.GetRegisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllRegisters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/GetAllRegisters',
            Register__pb2.GetAllRegistersRequest.SerializeToString,
            Register__pb2.GetAllRegistersReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllRegistersForReports(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/GetAllRegistersForReports',
            Register__pb2.GetAllRegistersRequest.SerializeToString,
            Register__pb2.GetAllRegistersReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/UpdateRegister',
            Register__pb2.Register.SerializeToString,
            Register__pb2.UpdateRegisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/AddRegister',
            Register__pb2.Register.SerializeToString,
            Register__pb2.AddRegisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/DeleteRegister',
            Register__pb2.DeleteRegisterRequest.SerializeToString,
            Register__pb2.DeleteRegisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRegisterByMachineName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/GetRegisterByMachineName',
            Register__pb2.GetRegisterByMachineNameRequest.SerializeToString,
            Register__pb2.GetRegisterByMachineNameReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExpressLaneConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/GetExpressLaneConfiguration',
            Register__pb2.GetExpressLaneConfigurationRequest.SerializeToString,
            Register__pb2.GetExpressLaneConfigurationReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetExpressLaneConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/SetExpressLaneConfiguration',
            Register__pb2.SetExpressLaneConfigurationRequest.SerializeToString,
            Register__pb2.SetExpressLaneConfigurationReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRegisterGroupAssignments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/GetRegisterGroupAssignments',
            Register__pb2.GetRegisterGroupAssignmentsRequest.SerializeToString,
            Register__pb2.GetRegisterGroupAssignmentsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRegisterGroupAssignments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/UpdateRegisterGroupAssignments',
            Register__pb2.UpdateRegisterGroupAssignmentsRequest.SerializeToString,
            Register__pb2.UpdateRegisterGroupAssignmentsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRegisterGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/GetRegisterGroup',
            Register__pb2.GetRegisterGroupRequest.SerializeToString,
            Register__pb2.GetRegisterGroupReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRegisterGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/UpdateRegisterGroup',
            Register__pb2.UpdateRegisterGroupRequest.SerializeToString,
            Register__pb2.UpdateRegisterGroupReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddRegisterGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/AddRegisterGroup',
            Register__pb2.AddRegisterGroupRequest.SerializeToString,
            Register__pb2.AddRegisterGroupReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRegisterGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/DeleteRegisterGroup',
            Register__pb2.DeleteRegisterGroupRequest.SerializeToString,
            Register__pb2.DeleteRegisterGroupReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAvailableColors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/GetAvailableColors',
            Register__pb2.GetAvailableColorsRequest.SerializeToString,
            Register__pb2.GetAvailableColorsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSpeedKeyMenus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/GetSpeedKeyMenus',
            Register__pb2.GetSpeedKeyMenusRequest.SerializeToString,
            Register__pb2.GetSpeedKeyMenusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddSpeedKeyMenu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/AddSpeedKeyMenu',
            Register__pb2.AddSpeedKeyMenuRequest.SerializeToString,
            Register__pb2.AddSpeedKeyMenuReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSpeedKeyMenu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/UpdateSpeedKeyMenu',
            Register__pb2.UpdateSpeedKeyMenuRequest.SerializeToString,
            Register__pb2.UpdateSpeedKeyMenuReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSpeedKeyMenu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterService/DeleteSpeedKeyMenu',
            Register__pb2.DeleteSpeedKeyMenuRequest.SerializeToString,
            Register__pb2.DeleteSpeedKeyMenuReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
