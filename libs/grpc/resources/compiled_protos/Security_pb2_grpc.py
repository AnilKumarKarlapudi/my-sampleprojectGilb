# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import libs.grpc.resources.compiled_protos.Security_pb2 as Security__pb2


class SecurityServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddSecurityGroup = channel.unary_unary(
                '/SecurityService/AddSecurityGroup',
                request_serializer=Security__pb2.AddSecurityGroupRequest.SerializeToString,
                response_deserializer=Security__pb2.AddSecurityGroupReply.FromString,
                )
        self.GetSecurityGroups = channel.unary_unary(
                '/SecurityService/GetSecurityGroups',
                request_serializer=Security__pb2.GetSecurityGroupsRequest.SerializeToString,
                response_deserializer=Security__pb2.GetSecurityGroupsReply.FromString,
                )
        self.UpdateSecurityGroup = channel.unary_unary(
                '/SecurityService/UpdateSecurityGroup',
                request_serializer=Security__pb2.UpdateSecurityGroupRequest.SerializeToString,
                response_deserializer=Security__pb2.UpdateSecurityGroupReply.FromString,
                )
        self.DeleteSecurityGroup = channel.unary_unary(
                '/SecurityService/DeleteSecurityGroup',
                request_serializer=Security__pb2.DeleteSecurityGroupRequest.SerializeToString,
                response_deserializer=Security__pb2.DeleteSecurityGroupReply.FromString,
                )
        self.GetApplications = channel.unary_unary(
                '/SecurityService/GetApplications',
                request_serializer=Security__pb2.GetApplicationsRequest.SerializeToString,
                response_deserializer=Security__pb2.GetApplicationsReply.FromString,
                )
        self.HasAccess = channel.unary_unary(
                '/SecurityService/HasAccess',
                request_serializer=Security__pb2.AccessCheckRequest.SerializeToString,
                response_deserializer=Security__pb2.AccessCheckReply.FromString,
                )
        self.GetSecurityGroupById = channel.unary_unary(
                '/SecurityService/GetSecurityGroupById',
                request_serializer=Security__pb2.GetSecurityGroupByIdRequest.SerializeToString,
                response_deserializer=Security__pb2.GetSecurityGroupByIdReply.FromString,
                )


class SecurityServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddSecurityGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSecurityGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSecurityGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSecurityGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetApplications(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSecurityGroupById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SecurityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddSecurityGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSecurityGroup,
                    request_deserializer=Security__pb2.AddSecurityGroupRequest.FromString,
                    response_serializer=Security__pb2.AddSecurityGroupReply.SerializeToString,
            ),
            'GetSecurityGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSecurityGroups,
                    request_deserializer=Security__pb2.GetSecurityGroupsRequest.FromString,
                    response_serializer=Security__pb2.GetSecurityGroupsReply.SerializeToString,
            ),
            'UpdateSecurityGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSecurityGroup,
                    request_deserializer=Security__pb2.UpdateSecurityGroupRequest.FromString,
                    response_serializer=Security__pb2.UpdateSecurityGroupReply.SerializeToString,
            ),
            'DeleteSecurityGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSecurityGroup,
                    request_deserializer=Security__pb2.DeleteSecurityGroupRequest.FromString,
                    response_serializer=Security__pb2.DeleteSecurityGroupReply.SerializeToString,
            ),
            'GetApplications': grpc.unary_unary_rpc_method_handler(
                    servicer.GetApplications,
                    request_deserializer=Security__pb2.GetApplicationsRequest.FromString,
                    response_serializer=Security__pb2.GetApplicationsReply.SerializeToString,
            ),
            'HasAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.HasAccess,
                    request_deserializer=Security__pb2.AccessCheckRequest.FromString,
                    response_serializer=Security__pb2.AccessCheckReply.SerializeToString,
            ),
            'GetSecurityGroupById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSecurityGroupById,
                    request_deserializer=Security__pb2.GetSecurityGroupByIdRequest.FromString,
                    response_serializer=Security__pb2.GetSecurityGroupByIdReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SecurityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SecurityService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddSecurityGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SecurityService/AddSecurityGroup',
            Security__pb2.AddSecurityGroupRequest.SerializeToString,
            Security__pb2.AddSecurityGroupReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSecurityGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SecurityService/GetSecurityGroups',
            Security__pb2.GetSecurityGroupsRequest.SerializeToString,
            Security__pb2.GetSecurityGroupsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSecurityGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SecurityService/UpdateSecurityGroup',
            Security__pb2.UpdateSecurityGroupRequest.SerializeToString,
            Security__pb2.UpdateSecurityGroupReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSecurityGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SecurityService/DeleteSecurityGroup',
            Security__pb2.DeleteSecurityGroupRequest.SerializeToString,
            Security__pb2.DeleteSecurityGroupReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetApplications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SecurityService/GetApplications',
            Security__pb2.GetApplicationsRequest.SerializeToString,
            Security__pb2.GetApplicationsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HasAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SecurityService/HasAccess',
            Security__pb2.AccessCheckRequest.SerializeToString,
            Security__pb2.AccessCheckReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSecurityGroupById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SecurityService/GetSecurityGroupById',
            Security__pb2.GetSecurityGroupByIdRequest.SerializeToString,
            Security__pb2.GetSecurityGroupByIdReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
