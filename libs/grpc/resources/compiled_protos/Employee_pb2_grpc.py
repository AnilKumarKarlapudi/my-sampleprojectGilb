# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import libs.grpc.resources.compiled_protos.Employee_pb2 as Employee__pb2


class EmployeeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddEmployee = channel.unary_unary(
            "/EmployeeService/AddEmployee",
            request_serializer=Employee__pb2.AddEmployeeRequest.SerializeToString,
            response_deserializer=Employee__pb2.AddEmployeeReply.FromString,
        )
        self.GetEmployees = channel.unary_unary(
            "/EmployeeService/GetEmployees",
            request_serializer=Employee__pb2.GetEmployeesRequest.SerializeToString,
            response_deserializer=Employee__pb2.GetEmployeesReply.FromString,
        )
        self.GetEmployee = channel.unary_unary(
            "/EmployeeService/GetEmployee",
            request_serializer=Employee__pb2.GetEmployeeRequest.SerializeToString,
            response_deserializer=Employee__pb2.GetEmployeeReply.FromString,
        )
        self.UpdateEmployee = channel.unary_unary(
            "/EmployeeService/UpdateEmployee",
            request_serializer=Employee__pb2.UpdateEmployeeRequest.SerializeToString,
            response_deserializer=Employee__pb2.UpdateEmployeeReply.FromString,
        )
        self.GetPasswordHash = channel.unary_unary(
            "/EmployeeService/GetPasswordHash",
            request_serializer=Employee__pb2.GetPasswordHashRequest.SerializeToString,
            response_deserializer=Employee__pb2.GetPasswordHashReply.FromString,
        )
        self.SetPasswordHash = channel.unary_unary(
            "/EmployeeService/SetPasswordHash",
            request_serializer=Employee__pb2.SetPasswordHashRequest.SerializeToString,
            response_deserializer=Employee__pb2.SetPasswordHashReply.FromString,
        )
        self.ChangePassword = channel.unary_unary(
            "/EmployeeService/ChangePassword",
            request_serializer=Employee__pb2.ChangePasswordRequest.SerializeToString,
            response_deserializer=Employee__pb2.ChangePasswordReply.FromString,
        )
        self.GetPasswordResetToken = channel.unary_unary(
            "/EmployeeService/GetPasswordResetToken",
            request_serializer=Employee__pb2.GetPasswordResetTokenRequest.SerializeToString,
            response_deserializer=Employee__pb2.GetPasswordResetTokenReply.FromString,
        )
        self.ResetPassword = channel.unary_unary(
            "/EmployeeService/ResetPassword",
            request_serializer=Employee__pb2.ResetPasswordRequest.SerializeToString,
            response_deserializer=Employee__pb2.ResetPasswordReply.FromString,
        )
        self.GetPassportUser = channel.unary_unary(
            "/EmployeeService/GetPassportUser",
            request_serializer=Employee__pb2.GetPassportUserRequest.SerializeToString,
            response_deserializer=Employee__pb2.GetPassportUserReply.FromString,
        )
        self.ResetAccessFailedCount = channel.unary_unary(
            "/EmployeeService/ResetAccessFailedCount",
            request_serializer=Employee__pb2.ResetAccessFailedCountRequest.SerializeToString,
            response_deserializer=Employee__pb2.ResetAccessFailedCountReply.FromString,
        )
        self.IncrementAccessFailedCount = channel.unary_unary(
            "/EmployeeService/IncrementAccessFailedCount",
            request_serializer=Employee__pb2.IncrementAccessFailedCountRequest.SerializeToString,
            response_deserializer=Employee__pb2.IncrementAccessFailedCountReply.FromString,
        )


class EmployeeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddEmployee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetEmployees(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetEmployee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateEmployee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetPasswordHash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetPasswordHash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ChangePassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetPasswordResetToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResetPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetPassportUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResetAccessFailedCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def IncrementAccessFailedCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_EmployeeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "AddEmployee": grpc.unary_unary_rpc_method_handler(
            servicer.AddEmployee,
            request_deserializer=Employee__pb2.AddEmployeeRequest.FromString,
            response_serializer=Employee__pb2.AddEmployeeReply.SerializeToString,
        ),
        "GetEmployees": grpc.unary_unary_rpc_method_handler(
            servicer.GetEmployees,
            request_deserializer=Employee__pb2.GetEmployeesRequest.FromString,
            response_serializer=Employee__pb2.GetEmployeesReply.SerializeToString,
        ),
        "GetEmployee": grpc.unary_unary_rpc_method_handler(
            servicer.GetEmployee,
            request_deserializer=Employee__pb2.GetEmployeeRequest.FromString,
            response_serializer=Employee__pb2.GetEmployeeReply.SerializeToString,
        ),
        "UpdateEmployee": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateEmployee,
            request_deserializer=Employee__pb2.UpdateEmployeeRequest.FromString,
            response_serializer=Employee__pb2.UpdateEmployeeReply.SerializeToString,
        ),
        "GetPasswordHash": grpc.unary_unary_rpc_method_handler(
            servicer.GetPasswordHash,
            request_deserializer=Employee__pb2.GetPasswordHashRequest.FromString,
            response_serializer=Employee__pb2.GetPasswordHashReply.SerializeToString,
        ),
        "SetPasswordHash": grpc.unary_unary_rpc_method_handler(
            servicer.SetPasswordHash,
            request_deserializer=Employee__pb2.SetPasswordHashRequest.FromString,
            response_serializer=Employee__pb2.SetPasswordHashReply.SerializeToString,
        ),
        "ChangePassword": grpc.unary_unary_rpc_method_handler(
            servicer.ChangePassword,
            request_deserializer=Employee__pb2.ChangePasswordRequest.FromString,
            response_serializer=Employee__pb2.ChangePasswordReply.SerializeToString,
        ),
        "GetPasswordResetToken": grpc.unary_unary_rpc_method_handler(
            servicer.GetPasswordResetToken,
            request_deserializer=Employee__pb2.GetPasswordResetTokenRequest.FromString,
            response_serializer=Employee__pb2.GetPasswordResetTokenReply.SerializeToString,
        ),
        "ResetPassword": grpc.unary_unary_rpc_method_handler(
            servicer.ResetPassword,
            request_deserializer=Employee__pb2.ResetPasswordRequest.FromString,
            response_serializer=Employee__pb2.ResetPasswordReply.SerializeToString,
        ),
        "GetPassportUser": grpc.unary_unary_rpc_method_handler(
            servicer.GetPassportUser,
            request_deserializer=Employee__pb2.GetPassportUserRequest.FromString,
            response_serializer=Employee__pb2.GetPassportUserReply.SerializeToString,
        ),
        "ResetAccessFailedCount": grpc.unary_unary_rpc_method_handler(
            servicer.ResetAccessFailedCount,
            request_deserializer=Employee__pb2.ResetAccessFailedCountRequest.FromString,
            response_serializer=Employee__pb2.ResetAccessFailedCountReply.SerializeToString,
        ),
        "IncrementAccessFailedCount": grpc.unary_unary_rpc_method_handler(
            servicer.IncrementAccessFailedCount,
            request_deserializer=Employee__pb2.IncrementAccessFailedCountRequest.FromString,
            response_serializer=Employee__pb2.IncrementAccessFailedCountReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("EmployeeService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class EmployeeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddEmployee(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EmployeeService/AddEmployee",
            Employee__pb2.AddEmployeeRequest.SerializeToString,
            Employee__pb2.AddEmployeeReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetEmployees(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EmployeeService/GetEmployees",
            Employee__pb2.GetEmployeesRequest.SerializeToString,
            Employee__pb2.GetEmployeesReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetEmployee(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EmployeeService/GetEmployee",
            Employee__pb2.GetEmployeeRequest.SerializeToString,
            Employee__pb2.GetEmployeeReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UpdateEmployee(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EmployeeService/UpdateEmployee",
            Employee__pb2.UpdateEmployeeRequest.SerializeToString,
            Employee__pb2.UpdateEmployeeReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetPasswordHash(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EmployeeService/GetPasswordHash",
            Employee__pb2.GetPasswordHashRequest.SerializeToString,
            Employee__pb2.GetPasswordHashReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetPasswordHash(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EmployeeService/SetPasswordHash",
            Employee__pb2.SetPasswordHashRequest.SerializeToString,
            Employee__pb2.SetPasswordHashReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ChangePassword(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EmployeeService/ChangePassword",
            Employee__pb2.ChangePasswordRequest.SerializeToString,
            Employee__pb2.ChangePasswordReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetPasswordResetToken(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EmployeeService/GetPasswordResetToken",
            Employee__pb2.GetPasswordResetTokenRequest.SerializeToString,
            Employee__pb2.GetPasswordResetTokenReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResetPassword(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EmployeeService/ResetPassword",
            Employee__pb2.ResetPasswordRequest.SerializeToString,
            Employee__pb2.ResetPasswordReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetPassportUser(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EmployeeService/GetPassportUser",
            Employee__pb2.GetPassportUserRequest.SerializeToString,
            Employee__pb2.GetPassportUserReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResetAccessFailedCount(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EmployeeService/ResetAccessFailedCount",
            Employee__pb2.ResetAccessFailedCountRequest.SerializeToString,
            Employee__pb2.ResetAccessFailedCountReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def IncrementAccessFailedCount(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EmployeeService/IncrementAccessFailedCount",
            Employee__pb2.IncrementAccessFailedCountRequest.SerializeToString,
            Employee__pb2.IncrementAccessFailedCountReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
